// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const mongoose = require('mongoose');
const cron = require('node-cron');
const chrono = require('chrono-node');

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
const app = express();
app.use(express.json());

// L·∫•y c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
const { PAGE_ACCESS_TOKEN, VERIFY_TOKEN, MONGO_URI, PORT } = process.env;

// K·∫øt n·ªëi MongoDB
mongoose.connect(MONGO_URI)
  .then(() => console.log('K·∫øt n·ªëi MongoDB th√†nh c√¥ng'))
  .catch(err => console.error('L·ªói k·∫øt n·ªëi MongoDB:', err));

// ƒê·ªãnh nghƒ©a schema cho s·ª± ki·ªán
const EventSchema = new mongoose.Schema({
  senderId: String,
  content: String,
  time: Date,
  repeat: String, // 'daily', 'weekly', ho·∫∑c false
  participants: [String],
  status: { type: String, default: 'pending' }
});

const Event = mongoose.model('Event', EventSchema);

// Route m·∫∑c ƒë·ªãnh
app.get('/', (req, res) => {
  res.send('Server ƒëang ch·∫°y!');
});

// X√°c th·ª±c Webhook t·ª´ Facebook
app.get('/webhook', (req, res) => {
  console.log('Nh·∫≠n y√™u c·∫ßu GET t·ª´ Facebook:', req.query);
  if (req.query['hub.verify_token'] === VERIFY_TOKEN) {
    res.send(req.query['hub.challenge']);
  } else {
    res.sendStatus(403);
  }
});

// H√†m chuy·ªÉn ƒë·ªïi th·ªùi gian sang m√∫i gi·ªù Vi·ªát Nam (GMT+7)
const toVietnamTime = (date) => {
  const vietnamOffset = 7 * 60; // GMT+7 (7 gi·ªù = 7 * 60 ph√∫t)
  const utcDate = new Date(date);
  const vietnamTime = new Date(utcDate.getTime() + vietnamOffset * 60 * 1000);
  return vietnamTime;
};

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian theo d·∫°ng "ng√†y/th√°ng/nƒÉm gi·ªù:ph√∫t" ·ªü m√∫i gi·ªù Vi·ªát Nam
const formatDateTime = (date) => {
  const vietnamDate = toVietnamTime(date);
  const day = String(vietnamDate.getUTCDate()).padStart(2, '0');
  const month = String(vietnamDate.getUTCMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
  const year = vietnamDate.getUTCFullYear();
  const hours = String(vietnamDate.getUTCHours()).padStart(2, '0');
  const minutes = String(vietnamDate.getUTCMinutes()).padStart(2, '0');
  return `${day}/${month}/${year} ${hours}:${minutes}`;
};

// H√†m ph√¢n t√≠ch th·ªùi gian ti·∫øng Vi·ªát
const parseVietnameseTime = (message) => {
  let baseDate = new Date();
  baseDate = toVietnamTime(baseDate); // Chuy·ªÉn baseDate sang m√∫i gi·ªù Vi·ªát Nam
  let time = null;

  // X√°c ƒë·ªãnh ng√†y/th√°ng/nƒÉm
  const dateMatch = message.match(/ng√†y\s+(\d{1,2})\/(\d{1,2})(?:\/(\d{4}))?/i);
  if (dateMatch) {
    const day = parseInt(dateMatch[1], 10);
    const month = parseInt(dateMatch[2], 10) - 1; // Th√°ng trong JavaScript b·∫Øt ƒë·∫ßu t·ª´ 0
    const year = dateMatch[3] ? parseInt(dateMatch[3], 10) : baseDate.getUTCFullYear();
    baseDate = new Date(Date.UTC(year, month, day));
  } else if (message.includes('ng√†y mai')) {
    baseDate.setUTCDate(baseDate.getUTCDate() + 1);
  } else if (message.includes('h√¥m nay')) {
    // Gi·ªØ nguy√™n ng√†y hi·ªán t·∫°i
  }

  // X√°c ƒë·ªãnh gi·ªù
  const timeMatch = message.match(/(\d{1,2})h\s*(s√°ng|chi·ªÅu)?/i);
  if (timeMatch) {
    let hour = parseInt(timeMatch[1], 10);
    const period = timeMatch[2] ? timeMatch[2].toLowerCase() : '';

    // ƒêi·ªÅu ch·ªânh gi·ªù theo bu·ªïi (s√°ng/chi·ªÅu)
    if (period === 'chi·ªÅu' && hour < 12) {
      hour += 12; // Chuy·ªÉn sang gi·ªù chi·ªÅu (v√≠ d·ª•: 5h chi·ªÅu -> 17h)
    } else if (period === 's√°ng' && hour === 12) {
      hour = 0; // 12h s√°ng -> 0h
    }

    // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y (theo UTC ƒë·ªÉ l∆∞u v√†o MongoDB)
    baseDate.setUTCHours(hour, 0, 0, 0);
    time = baseDate;
  }

  return time;
};

// H√†m tr√≠ch xu·∫•t n·ªôi dung t·ª´ tin nh·∫Øn
const extractContent = (message) => {
  let content = message
    .replace(/ng√†y\s+\d{1,2}\/\d{1,2}(?:\/\d{4})?/i, '') // Lo·∫°i b·ªè "ng√†y X/Y" ho·∫∑c "ng√†y X/Y/Z"
    .replace(/ng√†y mai|h√¥m nay|nay/i, '') // Lo·∫°i b·ªè "ng√†y mai", "h√¥m nay", "nay"
    .replace(/l√∫c\s+\d{1,2}h\s*(s√°ng|chi·ªÅu)?/i, '') // Lo·∫°i b·ªè "l√∫c Xh s√°ng/chi·ªÅu"
    .replace(/\d{1,2}h\s*(s√°ng|chi·ªÅu)?/i, '') // Lo·∫°i b·ªè "Xh s√°ng/chi·ªÅu"
    .replace(/m·ªói ng√†y|m·ªói tu·∫ßn/i, '') // Lo·∫°i b·ªè "m·ªói ng√†y", "m·ªói tu·∫ßn"
    .replace(/v·ªõi\s+\w+/i, '') // Lo·∫°i b·ªè "v·ªõi X"
    .trim();

  if (!content) {
    const words = message.split(' ');
    content = words[0];
  }

  return content;
};

// H√†m ph√¢n t√≠ch tin nh·∫Øn
const parseMessage = (message) => {
  const event = { content: '', time: null, repeat: false, participants: [], new_time: null };

  // ∆Øu ti√™n s·ª≠ d·ª•ng logic th·ªß c√¥ng cho ti·∫øng Vi·ªát
  event.time = parseVietnameseTime(message);

  // N·∫øu logic th·ªß c√¥ng kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c, th·ª≠ d√πng chrono-node
  if (!event.time) {
    const parsedTime = chrono.parse(message);
    if (parsedTime[0]) {
      event.time = parsedTime[0].start.date();
    }
  }

  // Tr√≠ch xu·∫•t th·ªùi gian m·ªõi (cho l·ªánh "ƒê·ªïi")
  if (message.includes('th√†nh')) {
    const newTimeText = message.split('th√†nh')[1].trim();
    event.new_time = parseVietnameseTime(newTimeText);
    if (!event.new_time) {
      const newParsedTime = chrono.parse(newTimeText);
      if (newParsedTime[0]) {
        event.new_time = newParsedTime[0].start.date();
      }
    }
  }

  // Tr√≠ch xu·∫•t n·ªôi dung
  event.content = extractContent(message);

  // Ki·ªÉm tra l·∫∑p l·∫°i
  if (message.includes('m·ªói ng√†y')) event.repeat = 'daily';
  if (message.includes('m·ªói tu·∫ßn')) event.repeat = 'weekly';

  // Tr√≠ch xu·∫•t ng∆∞·ªùi tham gia (n·∫øu c√≥ "v·ªõi"))
  if (message.includes('v·ªõi')) {
    const participant = message.split('v·ªõi')[1].trim().split(' ')[0];
    event.participants.push(participant);
  }

  return event;
};

// H√†m g·ª≠i tin nh·∫Øn
const sendMessage = async (recipientId, text) => {
  try {
    await axios.post('https://graph.facebook.com/v13.0/me/messages', {
      recipient: { id: recipientId },
      message: { text }
    }, {
      params: { access_token: PAGE_ACCESS_TOKEN }
    });
    console.log('ƒê√£ g·ª≠i tin nh·∫Øn:', text);
  } catch (error) {
    console.error('L·ªói g·ª≠i tin nh·∫Øn:', error.response ? error.response.data : error.message);
  }
};

// X·ª≠ l√Ω tin nh·∫Øn t·ª´ nh√≥m
app.post('/webhook', async (req, res) => {
  try {
    const data = req.body.entry[0].messaging[0];
    const senderId = data.sender.id;
    const message = data.message.text;

    if (message.includes('H·ªßy')) {
      const event = parseMessage(message.replace('H·ªßy', '').trim());
      await Event.deleteOne({ senderId, content: event.content, time: event.time });
      await sendMessage(senderId, `ƒê√£ h·ªßy: ${event.content}`);
    } else if (message.includes('ƒê·ªïi')) {
      const parts = message.split('th√†nh');
      const oldEvent = parseMessage(parts[0].replace('ƒê·ªïi', '').trim());
      const newEvent = parseMessage(parts[1].trim());
      await Event.updateOne(
        { senderId, content: oldEvent.content, time: oldEvent.time },
        { time: newEvent.new_time }
      );
      await sendMessage(senderId, `ƒê√£ ƒë·ªïi: ${oldEvent.content} th√†nh ${formatDateTime(newEvent.new_time)}`);
    } else {
      const event = parseMessage(message);
      if (!event.time) {
        await sendMessage(senderId, 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng nh∆∞: "H·ªçp ng√†y 15/10 l√∫c 9h s√°ng".');
        return res.sendStatus(200);
      }
      const newEvent = new Event({
        senderId,
        content: event.content,
        time: event.time,
        repeat: event.repeat,
        participants: event.participants
      });
      await newEvent.save();
      await sendMessage(senderId, `ƒê√£ l√™n l·ªãch: ${formatDateTime(event.time)}: ${event.content}`);
    }

    res.sendStatus(200);
  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω tin nh·∫Øn:', error);
    res.sendStatus(500);
  }
});

// L·∫≠p l·ªãch g·ª≠i nh·∫Øc nh·ªü
cron.schedule('* * * * *', async () => {
  try {
    const now = toVietnamTime(new Date()); // Th·ªùi gian hi·ªán t·∫°i ·ªü m√∫i gi·ªù Vi·ªát Nam
    const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000); // 1 gi·ªù sau
    const oneDayLater = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 1 ng√†y sau
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0); // ƒê·∫∑t v·ªÅ 00:00 ng√†y mai

    // Nh·∫Øc nh·ªü tr∆∞·ªõc 1 gi·ªù cho c√°c s·ª± ki·ªán trong ng√†y hi·ªán t·∫°i ho·∫∑c ng√†y mai
    const eventsSoon = await Event.find({
      time: {
        $gte: now, // S·ª± ki·ªán trong t∆∞∆°ng lai
        $lte: oneHourLater // Trong v√≤ng 1 gi·ªù t·ªõi
      },
      status: 'pending'
    });

    for (let event of eventsSoon) {
      await sendMessage(event.senderId, `üîî Nh·∫Øc nh·ªü tr∆∞·ªõc 1 gi·ªù: ${formatDateTime(event.time)}: ${event.content}`);
      event.status = 'sent';
      await event.save();

      if (event.repeat === 'daily') {
        event.time = new Date(event.time.getTime() + 24 * 60 * 60 * 1000);
        event.status = 'pending';
        await event.save();
      }
    }

    // Nh·∫Øc nh·ªü tr∆∞·ªõc 1 ng√†y cho c√°c s·ª± ki·ªán xa (sau ng√†y mai)
    const eventsFar = await Event.find({
      time: {
        $gte: tomorrow, // S·ª± ki·ªán sau ng√†y mai
        $lte: oneDayLater // Trong v√≤ng 1 ng√†y t·ªõi
      },
      status: 'pending'
    });

    for (let event of eventsFar) {
      await sendMessage(event.senderId, `üîî Nh·∫Øc nh·ªü tr∆∞·ªõc 1 ng√†y: ${formatDateTime(event.time)}: ${event.content}`);
      event.status = 'sent';
      await event.save();

      if (event.repeat === 'daily') {
        event.time = new Date(event.time.getTime() + 24 * 60 * 60 * 1000);
        event.status = 'pending';
        await event.save();
      }
    }

    // Nh·∫Øc nh·ªü ƒë√∫ng gi·ªù
    const eventsNow = await Event.find({
      time: { $lte: now },
      status: 'pending'
    });

    for (let event of eventsNow) {
      await sendMessage(event.senderId, `üîî ƒê√£ ƒë·∫øn gi·ªù: ${formatDateTime(event.time)}: ${event.content}`);
      event.status = 'sent';
      await event.save();

      if (event.repeat === 'daily') {
        event.time = new Date(event.time.getTime() + 24 * 60 * 60 * 1000);
        event.status = 'pending';
        await event.save();
      }
    }
  } catch (error) {
    console.error('L·ªói khi g·ª≠i nh·∫Øc nh·ªü:', error);
  }
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => console.log(`Server ch·∫°y tr√™n port ${PORT}`));